import pretty_midi

# Constants
BPM = 66
BEATS_PER_BAR = 4
SECONDS_PER_BEAT = 60 / BPM
SECONDS_PER_16TH = SECONDS_PER_BEAT / 4
KICK_NOTE = 36  # C1
KICK_VELOCITY_ACCENT = 120
KICK_VELOCITY_A = [115, 105, 95, 110, 100]  # Pattern A
KICK_VELOCITY_B = [115, 105, 110, 100, 90]  # Pattern B
KICK_POSITIONS_A = [0, 0.5, 1.25, 2, 2.5]  # in 16ths
KICK_POSITIONS_B = [0, 0.5, 2, 2.5, 3.75]

def create_kick_note(start_time, velocity):
    return pretty_midi.Note(
        velocity=velocity,
        pitch=KICK_NOTE,
        start=start_time,
        end=start_time + SECONDS_PER_16TH
    )

# Create the MIDI object
pm = pretty_midi.PrettyMIDI(initial_tempo=BPM)
drum = pretty_midi.Instrument(program=0, is_drum=True, name="Kick")

# 1) Tag hit at Bar 5.3.1 (for "Sway made this beat" accent)
bar_5_start = (5 - 1) * BEATS_PER_BAR * SECONDS_PER_BEAT
tag_kick_time = bar_5_start + (2 * SECONDS_PER_BEAT)
drum.notes.append(create_kick_note(tag_kick_time, KICK_VELOCITY_ACCENT))

# 2) Bars 9-21: Alternating Pattern A / Pattern B
for bar in range(9, 22):
    bar_start = (bar - 1) * BEATS_PER_BAR * SECONDS_PER_BEAT
    pattern = (KICK_POSITIONS_A, KICK_VELOCITY_A) if bar % 2 == 1 else (KICK_POSITIONS_B, KICK_VELOCITY_B)
    for pos, vel in zip(*pattern):
        t = bar_start + pos * SECONDS_PER_16TH
        drum.notes.append(create_kick_note(t, vel))

# 3) Bars 22-30: Silent (breakdown)

# 4) Bars 31-42: Repeat same A/B pattern
for bar in range(31, 43):
    bar_start = (bar - 1) * BEATS_PER_BAR * SECONDS_PER_BEAT
    pattern = (KICK_POSITIONS_A, KICK_VELOCITY_A) if bar % 2 == 1 else (KICK_POSITIONS_B, KICK_VELOCITY_B)
    for pos, vel in zip(*pattern):
        t = bar_start + pos * SECONDS_PER_16TH
        drum.notes.append(create_kick_note(t, vel))

# Add to MIDI and export
pm.instruments.append(drum)
pm.write("kick_pattern_66bpm.mid")
print("Kick MIDI saved as 'kick_pattern_66bpm.mid'")
