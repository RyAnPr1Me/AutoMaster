from mido import Message, MidiFile, MidiTrack, MetaMessage, bpm2tempo

# CONFIG
tempo_bpm = 140
ticks_per_beat = 480
kick_note = 36  # GM Kick
track_length_bars = 16  # 16 bars

# Convert time in beats to MIDI ticks
def beats_to_ticks(beats):
    return int(beats * ticks_per_beat)

# Define your kick pattern (in beats within a 2-bar phrase)
# Each entry is: (beat position, velocity)
kick_pattern = [
    (0.0, 100),     # Bar 1 beat 1
    (0.75, 40),     # Bar 1 beat 1a (16th ghost)
    (1.5, 60),      # Bar 1 beat 2&
    (3.75, 40),     # Bar 1 beat 4a (ghost)
    
    (4.0, 100),     # Bar 2 beat 1
    (5.75, 40),     # Bar 2 beat 2a (ghost)
    (6.25, 60),     # Bar 2 beat 3e
    (7.75, 100),    # Bar 2 beat 4a
]

# Add one kick hit during the producer tag at ~0:08 = ~4 beats
producer_tag_hit = (2.0, 30)  # Quiet ghost kick at tag tail

# Full pattern with mid-tag hit inserted
full_pattern = kick_pattern + [producer_tag_hit]

# Create MIDI file and track
mid = MidiFile(ticks_per_beat=ticks_per_beat)
track = MidiTrack()
mid.tracks.append(track)

# Set tempo at the beginning with time=0
track.append(MetaMessage('set_tempo', tempo=bpm2tempo(tempo_bpm), time=0))
track.append(Message('program_change', program=0, time=0, channel=9))  # Drum channel

# Create a simple approach: collect all events and sort them
events = []

# Generate kicks over 16 bars (8 repeats of 2-bar pattern)
for repeat in range(track_length_bars // 2):
    bar_offset = repeat * 8  # 8 beats per 2-bar pattern
    
    for beat_pos, velocity in full_pattern:
        absolute_beat = bar_offset + beat_pos
        tick_start = beats_to_ticks(absolute_beat)
        tick_end = tick_start + beats_to_ticks(0.25)  # 1/4 note duration
        
        events.append((tick_start, Message('note_on', channel=9, note=kick_note, velocity=velocity, time=0)))
        events.append((tick_end, Message('note_off', channel=9, note=kick_note, velocity=0, time=0)))

# Sort by time
events.sort(key=lambda x: x[0])

# Convert to delta time and add to track
last_tick = 0
for tick, message in events:
    delta = tick - last_tick
    message.time = delta
    track.append(message)
    last_tick = tick

# End the track
final_tick = beats_to_ticks(track_length_bars * 4)  # 4 beats per bar
end_delta = final_tick - last_tick
track.append(MetaMessage('end_of_track', time=end_delta))

# Save to file
mid.save('swerve_kick.mid')
print("ðŸ”¥ Kick MIDI saved as 'swerve_kick.mid'")
print(f"Track length: {track_length_bars} bars at {tempo_bpm} BPM")
print(f"Total events: {len([msg for msg in track if msg.type in ['note_on', 'note_off']])}")
# To convert this MIDI to WAV, use the provided midi_to_wav.py script with a soundfont.        