from mido import Message, MidiFile, MidiTrack, MetaMessage, bpm2tempo

# CONFIG
tempo_bpm = 140
ticks_per_beat = 480
kick_note = 36  # GM Kick
track_length_bars = 16  # 16 bars = 32 beats = ~14 seconds @ 140 BPM

# Convert time in beats to MIDI ticks
def beats_to_ticks(beats):
    return int(beats * ticks_per_beat)

# Define your kick pattern (in beats within a 2-bar phrase)
# Each entry is: (beat position, velocity)
kick_pattern = [
    (0.0, 100),     # Bar 1 beat 1
    (0.75, 40),     # Bar 1 beat 1a (16th ghost)
    (1.5, 60),      # Bar 1 beat 2&
    (3.75, 40),     # Bar 1 beat 4a (ghost)
    
    (4.0, 100),     # Bar 2 beat 1
    (5.75, 40),     # Bar 2 beat 2a (ghost)
    (6.25, 60),     # Bar 2 beat 3e
    (7.75, 100),    # Bar 2 beat 4a
]

# Add one kick hit during the producer tag at ~0:08 = ~4 beats
producer_tag_hit = (2.0, 30)  # Quiet ghost kick at tag tail

# Full pattern with mid-tag hit inserted
full_pattern = kick_pattern + [producer_tag_hit]

# Create MIDI file and track
mid = MidiFile(ticks_per_beat=ticks_per_beat)
track = MidiTrack()
mid.tracks.append(track)

# Set tempo
tempo = bpm2tempo(tempo_bpm)
track.append(Message('program_change', program=0, time=0))
track.append(MetaMessage('set_tempo', tempo=tempo))

# Generate kicks over 16 bars
for bar in range(track_length_bars // 2):  # 2-bar pattern repeat
    offset = bar * 8  # Each 2-bar loop is 8 beats
    for beat, velocity in full_pattern:
        time = beats_to_ticks(offset + beat)
        track.append(Message('note_on', note=kick_note, velocity=velocity, time=time))
        track.append(Message('note_off', note=kick_note, velocity=0, time=time + beats_to_ticks(0.1)))

# Save to file
mid.save('swerve_kick.mid')
print("ðŸ”¥ Kick MIDI saved as 'swerve_kick.mid'")
# To convert this MIDI to WAV, use the provided midi_to_wav.py script with a soundfont.
# Example usage:        